#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ITAssetTracking")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAdmin(Admin instance);
  partial void UpdateAdmin(Admin instance);
  partial void DeleteAdmin(Admin instance);
  partial void InsertSection(Section instance);
  partial void UpdateSection(Section instance);
  partial void DeleteSection(Section instance);
  partial void InsertDivision(Division instance);
  partial void UpdateDivision(Division instance);
  partial void DeleteDivision(Division instance);
  partial void InsertExternalUser(ExternalUser instance);
  partial void UpdateExternalUser(ExternalUser instance);
  partial void DeleteExternalUser(ExternalUser instance);
  partial void InsertITAssetAssignHistory(ITAssetAssignHistory instance);
  partial void UpdateITAssetAssignHistory(ITAssetAssignHistory instance);
  partial void DeleteITAssetAssignHistory(ITAssetAssignHistory instance);
  partial void InsertITAssetProductInfo(ITAssetProductInfo instance);
  partial void UpdateITAssetProductInfo(ITAssetProductInfo instance);
  partial void DeleteITAssetProductInfo(ITAssetProductInfo instance);
  partial void InsertITAssetSubType(ITAssetSubType instance);
  partial void UpdateITAssetSubType(ITAssetSubType instance);
  partial void DeleteITAssetSubType(ITAssetSubType instance);
  partial void InsertITAssetType(ITAssetType instance);
  partial void UpdateITAssetType(ITAssetType instance);
  partial void DeleteITAssetType(ITAssetType instance);
  partial void InsertLocation(Location instance);
  partial void UpdateLocation(Location instance);
  partial void DeleteLocation(Location instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ITAssetTrackingConnectionString2"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Admin> Admins
	{
		get
		{
			return this.GetTable<Admin>();
		}
	}
	
	public System.Data.Linq.Table<Section> Sections
	{
		get
		{
			return this.GetTable<Section>();
		}
	}
	
	public System.Data.Linq.Table<Division> Divisions
	{
		get
		{
			return this.GetTable<Division>();
		}
	}
	
	public System.Data.Linq.Table<ExternalUser> ExternalUsers
	{
		get
		{
			return this.GetTable<ExternalUser>();
		}
	}
	
	public System.Data.Linq.Table<ITAssetAssignHistory> ITAssetAssignHistories
	{
		get
		{
			return this.GetTable<ITAssetAssignHistory>();
		}
	}
	
	public System.Data.Linq.Table<ITAssetProductInfo> ITAssetProductInfos
	{
		get
		{
			return this.GetTable<ITAssetProductInfo>();
		}
	}
	
	public System.Data.Linq.Table<ITAssetSubType> ITAssetSubTypes
	{
		get
		{
			return this.GetTable<ITAssetSubType>();
		}
	}
	
	public System.Data.Linq.Table<ITAssetType> ITAssetTypes
	{
		get
		{
			return this.GetTable<ITAssetType>();
		}
	}
	
	public System.Data.Linq.Table<Location> Locations
	{
		get
		{
			return this.GetTable<Location>();
		}
	}
	
	public System.Data.Linq.Table<vw_ITAssetAllProduct> vw_ITAssetAllProducts
	{
		get
		{
			return this.GetTable<vw_ITAssetAllProduct>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="ITASSET.Admin")]
public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _username;
	
	private string _password;
	
	private int _StaffID;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnStaffIDChanging(int value);
    partial void OnStaffIDChanged();
    #endregion
	
	public Admin()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string username
	{
		get
		{
			return this._username;
		}
		set
		{
			if ((this._username != value))
			{
				this.OnusernameChanging(value);
				this.SendPropertyChanging();
				this._username = value;
				this.SendPropertyChanged("username");
				this.OnusernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string password
	{
		get
		{
			return this._password;
		}
		set
		{
			if ((this._password != value))
			{
				this.OnpasswordChanging(value);
				this.SendPropertyChanging();
				this._password = value;
				this.SendPropertyChanged("password");
				this.OnpasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Int NOT NULL")]
	public int StaffID
	{
		get
		{
			return this._StaffID;
		}
		set
		{
			if ((this._StaffID != value))
			{
				this.OnStaffIDChanging(value);
				this.SendPropertyChanging();
				this._StaffID = value;
				this.SendPropertyChanged("StaffID");
				this.OnStaffIDChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="ITASSET.Section")]
public partial class Section : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _DivisionID;
	
	private string _Section1;
	
	private string _Code;
	
	private EntitySet<ITAssetAssignHistory> _ITAssetAssignHistories;
	
	private EntitySet<ITAssetProductInfo> _ITAssetProductInfos;
	
	private EntityRef<Division> _Division;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDivisionIDChanging(int value);
    partial void OnDivisionIDChanged();
    partial void OnSection1Changing(string value);
    partial void OnSection1Changed();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
	
	public Section()
	{
		this._ITAssetAssignHistories = new EntitySet<ITAssetAssignHistory>(new Action<ITAssetAssignHistory>(this.attach_ITAssetAssignHistories), new Action<ITAssetAssignHistory>(this.detach_ITAssetAssignHistories));
		this._ITAssetProductInfos = new EntitySet<ITAssetProductInfo>(new Action<ITAssetProductInfo>(this.attach_ITAssetProductInfos), new Action<ITAssetProductInfo>(this.detach_ITAssetProductInfos));
		this._Division = default(EntityRef<Division>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionID", DbType="Int NOT NULL")]
	public int DivisionID
	{
		get
		{
			return this._DivisionID;
		}
		set
		{
			if ((this._DivisionID != value))
			{
				if (this._Division.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDivisionIDChanging(value);
				this.SendPropertyChanging();
				this._DivisionID = value;
				this.SendPropertyChanged("DivisionID");
				this.OnDivisionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Section", Storage="_Section1", DbType="NVarChar(100)")]
	public string Section1
	{
		get
		{
			return this._Section1;
		}
		set
		{
			if ((this._Section1 != value))
			{
				this.OnSection1Changing(value);
				this.SendPropertyChanging();
				this._Section1 = value;
				this.SendPropertyChanged("Section1");
				this.OnSection1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_ITAssetAssignHistory", Storage="_ITAssetAssignHistories", ThisKey="id", OtherKey="SectionID")]
	public EntitySet<ITAssetAssignHistory> ITAssetAssignHistories
	{
		get
		{
			return this._ITAssetAssignHistories;
		}
		set
		{
			this._ITAssetAssignHistories.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_ITAssetProductInfo", Storage="_ITAssetProductInfos", ThisKey="id", OtherKey="SectionID")]
	public EntitySet<ITAssetProductInfo> ITAssetProductInfos
	{
		get
		{
			return this._ITAssetProductInfos;
		}
		set
		{
			this._ITAssetProductInfos.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Section", Storage="_Division", ThisKey="DivisionID", OtherKey="id", IsForeignKey=true)]
	public Division Division
	{
		get
		{
			return this._Division.Entity;
		}
		set
		{
			Division previousValue = this._Division.Entity;
			if (((previousValue != value) 
						|| (this._Division.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Division.Entity = null;
					previousValue.Sections.Remove(this);
				}
				this._Division.Entity = value;
				if ((value != null))
				{
					value.Sections.Add(this);
					this._DivisionID = value.id;
				}
				else
				{
					this._DivisionID = default(int);
				}
				this.SendPropertyChanged("Division");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ITAssetAssignHistories(ITAssetAssignHistory entity)
	{
		this.SendPropertyChanging();
		entity.Section = this;
	}
	
	private void detach_ITAssetAssignHistories(ITAssetAssignHistory entity)
	{
		this.SendPropertyChanging();
		entity.Section = null;
	}
	
	private void attach_ITAssetProductInfos(ITAssetProductInfo entity)
	{
		this.SendPropertyChanging();
		entity.Section = this;
	}
	
	private void detach_ITAssetProductInfos(ITAssetProductInfo entity)
	{
		this.SendPropertyChanging();
		entity.Section = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="ITASSET.Division")]
public partial class Division : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _Division1;
	
	private string _Code;
	
	private EntitySet<Section> _Sections;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDivision1Changing(string value);
    partial void OnDivision1Changed();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
	
	public Division()
	{
		this._Sections = new EntitySet<Section>(new Action<Section>(this.attach_Sections), new Action<Section>(this.detach_Sections));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Division", Storage="_Division1", DbType="NVarChar(100)")]
	public string Division1
	{
		get
		{
			return this._Division1;
		}
		set
		{
			if ((this._Division1 != value))
			{
				this.OnDivision1Changing(value);
				this.SendPropertyChanging();
				this._Division1 = value;
				this.SendPropertyChanged("Division1");
				this.OnDivision1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Section", Storage="_Sections", ThisKey="id", OtherKey="DivisionID")]
	public EntitySet<Section> Sections
	{
		get
		{
			return this._Sections;
		}
		set
		{
			this._Sections.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Sections(Section entity)
	{
		this.SendPropertyChanging();
		entity.Division = this;
	}
	
	private void detach_Sections(Section entity)
	{
		this.SendPropertyChanging();
		entity.Division = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="ITASSET.ExternalUser")]
public partial class ExternalUser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _enumExternalUserType;
	
	private string _Name;
	
	private string _Details;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnenumExternalUserTypeChanging(int value);
    partial void OnenumExternalUserTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    #endregion
	
	public ExternalUser()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enumExternalUserType", DbType="Int NOT NULL")]
	public int enumExternalUserType
	{
		get
		{
			return this._enumExternalUserType;
		}
		set
		{
			if ((this._enumExternalUserType != value))
			{
				this.OnenumExternalUserTypeChanging(value);
				this.SendPropertyChanging();
				this._enumExternalUserType = value;
				this.SendPropertyChanged("enumExternalUserType");
				this.OnenumExternalUserTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(MAX)")]
	public string Details
	{
		get
		{
			return this._Details;
		}
		set
		{
			if ((this._Details != value))
			{
				this.OnDetailsChanging(value);
				this.SendPropertyChanging();
				this._Details = value;
				this.SendPropertyChanged("Details");
				this.OnDetailsChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="ITASSET.ITAssetAssignHistory")]
public partial class ITAssetAssignHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _ITAssetProductInfoID;
	
	private System.Nullable<decimal> _enumStatus;
	
	private System.Nullable<int> _CurrentUserID;
	
	private System.Nullable<int> _CurrentLocationID;
	
	private System.Nullable<int> _SectionID;
	
	private string _AssignmentComment;
	
	private string _editBy;
	
	private System.Nullable<System.DateTime> _editDate;
	
	private EntityRef<Section> _Section;
	
	private EntityRef<ITAssetProductInfo> _ITAssetProductInfo;
	
	private EntityRef<Location> _Location;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnITAssetProductInfoIDChanging(int value);
    partial void OnITAssetProductInfoIDChanged();
    partial void OnenumStatusChanging(System.Nullable<decimal> value);
    partial void OnenumStatusChanged();
    partial void OnCurrentUserIDChanging(System.Nullable<int> value);
    partial void OnCurrentUserIDChanged();
    partial void OnCurrentLocationIDChanging(System.Nullable<int> value);
    partial void OnCurrentLocationIDChanged();
    partial void OnSectionIDChanging(System.Nullable<int> value);
    partial void OnSectionIDChanged();
    partial void OnAssignmentCommentChanging(string value);
    partial void OnAssignmentCommentChanged();
    partial void OneditByChanging(string value);
    partial void OneditByChanged();
    partial void OneditDateChanging(System.Nullable<System.DateTime> value);
    partial void OneditDateChanged();
    #endregion
	
	public ITAssetAssignHistory()
	{
		this._Section = default(EntityRef<Section>);
		this._ITAssetProductInfo = default(EntityRef<ITAssetProductInfo>);
		this._Location = default(EntityRef<Location>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ITAssetProductInfoID", DbType="Int NOT NULL")]
	public int ITAssetProductInfoID
	{
		get
		{
			return this._ITAssetProductInfoID;
		}
		set
		{
			if ((this._ITAssetProductInfoID != value))
			{
				if (this._ITAssetProductInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnITAssetProductInfoIDChanging(value);
				this.SendPropertyChanging();
				this._ITAssetProductInfoID = value;
				this.SendPropertyChanged("ITAssetProductInfoID");
				this.OnITAssetProductInfoIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enumStatus", DbType="Decimal(2,0)")]
	public System.Nullable<decimal> enumStatus
	{
		get
		{
			return this._enumStatus;
		}
		set
		{
			if ((this._enumStatus != value))
			{
				this.OnenumStatusChanging(value);
				this.SendPropertyChanging();
				this._enumStatus = value;
				this.SendPropertyChanged("enumStatus");
				this.OnenumStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentUserID", DbType="Int")]
	public System.Nullable<int> CurrentUserID
	{
		get
		{
			return this._CurrentUserID;
		}
		set
		{
			if ((this._CurrentUserID != value))
			{
				this.OnCurrentUserIDChanging(value);
				this.SendPropertyChanging();
				this._CurrentUserID = value;
				this.SendPropertyChanged("CurrentUserID");
				this.OnCurrentUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentLocationID", DbType="Int")]
	public System.Nullable<int> CurrentLocationID
	{
		get
		{
			return this._CurrentLocationID;
		}
		set
		{
			if ((this._CurrentLocationID != value))
			{
				if (this._Location.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCurrentLocationIDChanging(value);
				this.SendPropertyChanging();
				this._CurrentLocationID = value;
				this.SendPropertyChanged("CurrentLocationID");
				this.OnCurrentLocationIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionID", DbType="Int")]
	public System.Nullable<int> SectionID
	{
		get
		{
			return this._SectionID;
		}
		set
		{
			if ((this._SectionID != value))
			{
				if (this._Section.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSectionIDChanging(value);
				this.SendPropertyChanging();
				this._SectionID = value;
				this.SendPropertyChanged("SectionID");
				this.OnSectionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentComment", DbType="NVarChar(255)")]
	public string AssignmentComment
	{
		get
		{
			return this._AssignmentComment;
		}
		set
		{
			if ((this._AssignmentComment != value))
			{
				this.OnAssignmentCommentChanging(value);
				this.SendPropertyChanging();
				this._AssignmentComment = value;
				this.SendPropertyChanged("AssignmentComment");
				this.OnAssignmentCommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_editBy", DbType="NVarChar(150)")]
	public string editBy
	{
		get
		{
			return this._editBy;
		}
		set
		{
			if ((this._editBy != value))
			{
				this.OneditByChanging(value);
				this.SendPropertyChanging();
				this._editBy = value;
				this.SendPropertyChanged("editBy");
				this.OneditByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_editDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> editDate
	{
		get
		{
			return this._editDate;
		}
		set
		{
			if ((this._editDate != value))
			{
				this.OneditDateChanging(value);
				this.SendPropertyChanging();
				this._editDate = value;
				this.SendPropertyChanged("editDate");
				this.OneditDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_ITAssetAssignHistory", Storage="_Section", ThisKey="SectionID", OtherKey="id", IsForeignKey=true)]
	public Section Section
	{
		get
		{
			return this._Section.Entity;
		}
		set
		{
			Section previousValue = this._Section.Entity;
			if (((previousValue != value) 
						|| (this._Section.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Section.Entity = null;
					previousValue.ITAssetAssignHistories.Remove(this);
				}
				this._Section.Entity = value;
				if ((value != null))
				{
					value.ITAssetAssignHistories.Add(this);
					this._SectionID = value.id;
				}
				else
				{
					this._SectionID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Section");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ITAssetProductInfo_ITAssetAssignHistory", Storage="_ITAssetProductInfo", ThisKey="ITAssetProductInfoID", OtherKey="id", IsForeignKey=true)]
	public ITAssetProductInfo ITAssetProductInfo
	{
		get
		{
			return this._ITAssetProductInfo.Entity;
		}
		set
		{
			ITAssetProductInfo previousValue = this._ITAssetProductInfo.Entity;
			if (((previousValue != value) 
						|| (this._ITAssetProductInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ITAssetProductInfo.Entity = null;
					previousValue.ITAssetAssignHistories.Remove(this);
				}
				this._ITAssetProductInfo.Entity = value;
				if ((value != null))
				{
					value.ITAssetAssignHistories.Add(this);
					this._ITAssetProductInfoID = value.id;
				}
				else
				{
					this._ITAssetProductInfoID = default(int);
				}
				this.SendPropertyChanged("ITAssetProductInfo");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ITAssetAssignHistory", Storage="_Location", ThisKey="CurrentLocationID", OtherKey="LID", IsForeignKey=true)]
	public Location Location
	{
		get
		{
			return this._Location.Entity;
		}
		set
		{
			Location previousValue = this._Location.Entity;
			if (((previousValue != value) 
						|| (this._Location.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Location.Entity = null;
					previousValue.ITAssetAssignHistories.Remove(this);
				}
				this._Location.Entity = value;
				if ((value != null))
				{
					value.ITAssetAssignHistories.Add(this);
					this._CurrentLocationID = value.LID;
				}
				else
				{
					this._CurrentLocationID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Location");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="ITASSET.ITAssetProductInfo")]
public partial class ITAssetProductInfo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _AssetID;
	
	private int _ITAssetSubTypeID;
	
	private string _ITAssetDetails;
	
	private string _UniquePartNum;
	
	private string _ProductNumber;
	
	private string _PR_NO;
	
	private System.Nullable<System.DateTime> _PR_Date;
	
	private string _PO_NO;
	
	private System.Nullable<System.DateTime> _PO_Date;
	
	private string _CostCode;
	
	private string _SupplierID;
	
	private string _ReceivingNumber;
	
	private System.Nullable<System.DateTime> _ShipmentDate;
	
	private System.Nullable<double> _Price;
	
	private string _Currency;
	
	private System.Nullable<System.DateTime> _WarrantyStart;
	
	private System.Nullable<System.DateTime> _WarrantyEnd;
	
	private System.Nullable<System.DateTime> _DateOfUse;
	
	private System.DateTime _SubmitDate;
	
	private string _SubmitBy;
	
	private System.Nullable<System.DateTime> _EditDate;
	
	private string _EditBy;
	
	private System.Nullable<decimal> _enumStatus;
	
	private System.Nullable<decimal> _isAsset;
	
	private System.Nullable<int> _currentUserID;
	
	private System.Nullable<int> _currentLocationID;
	
	private string _AssignmentComment;
	
	private System.Nullable<int> _SectionID;
	
	private EntitySet<ITAssetAssignHistory> _ITAssetAssignHistories;
	
	private EntityRef<Section> _Section;
	
	private EntityRef<ITAssetSubType> _ITAssetSubType;
	
	private EntityRef<Location> _Location;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnAssetIDChanging(string value);
    partial void OnAssetIDChanged();
    partial void OnITAssetSubTypeIDChanging(int value);
    partial void OnITAssetSubTypeIDChanged();
    partial void OnITAssetDetailsChanging(string value);
    partial void OnITAssetDetailsChanged();
    partial void OnUniquePartNumChanging(string value);
    partial void OnUniquePartNumChanged();
    partial void OnProductNumberChanging(string value);
    partial void OnProductNumberChanged();
    partial void OnPR_NOChanging(string value);
    partial void OnPR_NOChanged();
    partial void OnPR_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnPR_DateChanged();
    partial void OnPO_NOChanging(string value);
    partial void OnPO_NOChanged();
    partial void OnPO_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnPO_DateChanged();
    partial void OnCostCodeChanging(string value);
    partial void OnCostCodeChanged();
    partial void OnSupplierIDChanging(string value);
    partial void OnSupplierIDChanged();
    partial void OnReceivingNumberChanging(string value);
    partial void OnReceivingNumberChanged();
    partial void OnShipmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShipmentDateChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnWarrantyStartChanging(System.Nullable<System.DateTime> value);
    partial void OnWarrantyStartChanged();
    partial void OnWarrantyEndChanging(System.Nullable<System.DateTime> value);
    partial void OnWarrantyEndChanged();
    partial void OnDateOfUseChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfUseChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnSubmitByChanging(string value);
    partial void OnSubmitByChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnEditByChanging(string value);
    partial void OnEditByChanged();
    partial void OnenumStatusChanging(System.Nullable<decimal> value);
    partial void OnenumStatusChanged();
    partial void OnisAssetChanging(System.Nullable<decimal> value);
    partial void OnisAssetChanged();
    partial void OncurrentUserIDChanging(System.Nullable<int> value);
    partial void OncurrentUserIDChanged();
    partial void OncurrentLocationIDChanging(System.Nullable<int> value);
    partial void OncurrentLocationIDChanged();
    partial void OnAssignmentCommentChanging(string value);
    partial void OnAssignmentCommentChanged();
    partial void OnSectionIDChanging(System.Nullable<int> value);
    partial void OnSectionIDChanged();
    #endregion
	
	public ITAssetProductInfo()
	{
		this._ITAssetAssignHistories = new EntitySet<ITAssetAssignHistory>(new Action<ITAssetAssignHistory>(this.attach_ITAssetAssignHistories), new Action<ITAssetAssignHistory>(this.detach_ITAssetAssignHistories));
		this._Section = default(EntityRef<Section>);
		this._ITAssetSubType = default(EntityRef<ITAssetSubType>);
		this._Location = default(EntityRef<Location>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string AssetID
	{
		get
		{
			return this._AssetID;
		}
		set
		{
			if ((this._AssetID != value))
			{
				this.OnAssetIDChanging(value);
				this.SendPropertyChanging();
				this._AssetID = value;
				this.SendPropertyChanged("AssetID");
				this.OnAssetIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ITAssetSubTypeID", DbType="Int NOT NULL")]
	public int ITAssetSubTypeID
	{
		get
		{
			return this._ITAssetSubTypeID;
		}
		set
		{
			if ((this._ITAssetSubTypeID != value))
			{
				if (this._ITAssetSubType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnITAssetSubTypeIDChanging(value);
				this.SendPropertyChanging();
				this._ITAssetSubTypeID = value;
				this.SendPropertyChanged("ITAssetSubTypeID");
				this.OnITAssetSubTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ITAssetDetails", DbType="NVarChar(255)")]
	public string ITAssetDetails
	{
		get
		{
			return this._ITAssetDetails;
		}
		set
		{
			if ((this._ITAssetDetails != value))
			{
				this.OnITAssetDetailsChanging(value);
				this.SendPropertyChanging();
				this._ITAssetDetails = value;
				this.SendPropertyChanged("ITAssetDetails");
				this.OnITAssetDetailsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniquePartNum", DbType="NVarChar(255)")]
	public string UniquePartNum
	{
		get
		{
			return this._UniquePartNum;
		}
		set
		{
			if ((this._UniquePartNum != value))
			{
				this.OnUniquePartNumChanging(value);
				this.SendPropertyChanging();
				this._UniquePartNum = value;
				this.SendPropertyChanged("UniquePartNum");
				this.OnUniquePartNumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductNumber", DbType="NVarChar(255)")]
	public string ProductNumber
	{
		get
		{
			return this._ProductNumber;
		}
		set
		{
			if ((this._ProductNumber != value))
			{
				this.OnProductNumberChanging(value);
				this.SendPropertyChanging();
				this._ProductNumber = value;
				this.SendPropertyChanged("ProductNumber");
				this.OnProductNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PR_NO", DbType="NVarChar(100)")]
	public string PR_NO
	{
		get
		{
			return this._PR_NO;
		}
		set
		{
			if ((this._PR_NO != value))
			{
				this.OnPR_NOChanging(value);
				this.SendPropertyChanging();
				this._PR_NO = value;
				this.SendPropertyChanged("PR_NO");
				this.OnPR_NOChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PR_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> PR_Date
	{
		get
		{
			return this._PR_Date;
		}
		set
		{
			if ((this._PR_Date != value))
			{
				this.OnPR_DateChanging(value);
				this.SendPropertyChanging();
				this._PR_Date = value;
				this.SendPropertyChanged("PR_Date");
				this.OnPR_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PO_NO", DbType="NVarChar(100)")]
	public string PO_NO
	{
		get
		{
			return this._PO_NO;
		}
		set
		{
			if ((this._PO_NO != value))
			{
				this.OnPO_NOChanging(value);
				this.SendPropertyChanging();
				this._PO_NO = value;
				this.SendPropertyChanged("PO_NO");
				this.OnPO_NOChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PO_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> PO_Date
	{
		get
		{
			return this._PO_Date;
		}
		set
		{
			if ((this._PO_Date != value))
			{
				this.OnPO_DateChanging(value);
				this.SendPropertyChanging();
				this._PO_Date = value;
				this.SendPropertyChanged("PO_Date");
				this.OnPO_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCode", DbType="NVarChar(20)")]
	public string CostCode
	{
		get
		{
			return this._CostCode;
		}
		set
		{
			if ((this._CostCode != value))
			{
				this.OnCostCodeChanging(value);
				this.SendPropertyChanging();
				this._CostCode = value;
				this.SendPropertyChanged("CostCode");
				this.OnCostCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="NVarChar(200)")]
	public string SupplierID
	{
		get
		{
			return this._SupplierID;
		}
		set
		{
			if ((this._SupplierID != value))
			{
				this.OnSupplierIDChanging(value);
				this.SendPropertyChanging();
				this._SupplierID = value;
				this.SendPropertyChanged("SupplierID");
				this.OnSupplierIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivingNumber", DbType="NVarChar(100)")]
	public string ReceivingNumber
	{
		get
		{
			return this._ReceivingNumber;
		}
		set
		{
			if ((this._ReceivingNumber != value))
			{
				this.OnReceivingNumberChanging(value);
				this.SendPropertyChanging();
				this._ReceivingNumber = value;
				this.SendPropertyChanged("ReceivingNumber");
				this.OnReceivingNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipmentDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ShipmentDate
	{
		get
		{
			return this._ShipmentDate;
		}
		set
		{
			if ((this._ShipmentDate != value))
			{
				this.OnShipmentDateChanging(value);
				this.SendPropertyChanging();
				this._ShipmentDate = value;
				this.SendPropertyChanged("ShipmentDate");
				this.OnShipmentDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="NVarChar(50)")]
	public string Currency
	{
		get
		{
			return this._Currency;
		}
		set
		{
			if ((this._Currency != value))
			{
				this.OnCurrencyChanging(value);
				this.SendPropertyChanging();
				this._Currency = value;
				this.SendPropertyChanged("Currency");
				this.OnCurrencyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarrantyStart", DbType="DateTime")]
	public System.Nullable<System.DateTime> WarrantyStart
	{
		get
		{
			return this._WarrantyStart;
		}
		set
		{
			if ((this._WarrantyStart != value))
			{
				this.OnWarrantyStartChanging(value);
				this.SendPropertyChanging();
				this._WarrantyStart = value;
				this.SendPropertyChanged("WarrantyStart");
				this.OnWarrantyStartChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarrantyEnd", DbType="DateTime")]
	public System.Nullable<System.DateTime> WarrantyEnd
	{
		get
		{
			return this._WarrantyEnd;
		}
		set
		{
			if ((this._WarrantyEnd != value))
			{
				this.OnWarrantyEndChanging(value);
				this.SendPropertyChanging();
				this._WarrantyEnd = value;
				this.SendPropertyChanged("WarrantyEnd");
				this.OnWarrantyEndChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfUse", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfUse
	{
		get
		{
			return this._DateOfUse;
		}
		set
		{
			if ((this._DateOfUse != value))
			{
				this.OnDateOfUseChanging(value);
				this.SendPropertyChanging();
				this._DateOfUse = value;
				this.SendPropertyChanged("DateOfUse");
				this.OnDateOfUseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="DateTime NOT NULL")]
	public System.DateTime SubmitDate
	{
		get
		{
			return this._SubmitDate;
		}
		set
		{
			if ((this._SubmitDate != value))
			{
				this.OnSubmitDateChanging(value);
				this.SendPropertyChanging();
				this._SubmitDate = value;
				this.SendPropertyChanged("SubmitDate");
				this.OnSubmitDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitBy", DbType="NVarChar(120) NOT NULL", CanBeNull=false)]
	public string SubmitBy
	{
		get
		{
			return this._SubmitBy;
		}
		set
		{
			if ((this._SubmitBy != value))
			{
				this.OnSubmitByChanging(value);
				this.SendPropertyChanging();
				this._SubmitBy = value;
				this.SendPropertyChanged("SubmitBy");
				this.OnSubmitByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> EditDate
	{
		get
		{
			return this._EditDate;
		}
		set
		{
			if ((this._EditDate != value))
			{
				this.OnEditDateChanging(value);
				this.SendPropertyChanging();
				this._EditDate = value;
				this.SendPropertyChanged("EditDate");
				this.OnEditDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditBy", DbType="NVarChar(120)")]
	public string EditBy
	{
		get
		{
			return this._EditBy;
		}
		set
		{
			if ((this._EditBy != value))
			{
				this.OnEditByChanging(value);
				this.SendPropertyChanging();
				this._EditBy = value;
				this.SendPropertyChanged("EditBy");
				this.OnEditByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enumStatus", DbType="Decimal(2,0)")]
	public System.Nullable<decimal> enumStatus
	{
		get
		{
			return this._enumStatus;
		}
		set
		{
			if ((this._enumStatus != value))
			{
				this.OnenumStatusChanging(value);
				this.SendPropertyChanging();
				this._enumStatus = value;
				this.SendPropertyChanged("enumStatus");
				this.OnenumStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAsset", DbType="Decimal(1,0)")]
	public System.Nullable<decimal> isAsset
	{
		get
		{
			return this._isAsset;
		}
		set
		{
			if ((this._isAsset != value))
			{
				this.OnisAssetChanging(value);
				this.SendPropertyChanging();
				this._isAsset = value;
				this.SendPropertyChanged("isAsset");
				this.OnisAssetChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentUserID", DbType="Int")]
	public System.Nullable<int> currentUserID
	{
		get
		{
			return this._currentUserID;
		}
		set
		{
			if ((this._currentUserID != value))
			{
				this.OncurrentUserIDChanging(value);
				this.SendPropertyChanging();
				this._currentUserID = value;
				this.SendPropertyChanged("currentUserID");
				this.OncurrentUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentLocationID", DbType="Int")]
	public System.Nullable<int> currentLocationID
	{
		get
		{
			return this._currentLocationID;
		}
		set
		{
			if ((this._currentLocationID != value))
			{
				if (this._Location.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OncurrentLocationIDChanging(value);
				this.SendPropertyChanging();
				this._currentLocationID = value;
				this.SendPropertyChanged("currentLocationID");
				this.OncurrentLocationIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentComment", DbType="NVarChar(255)")]
	public string AssignmentComment
	{
		get
		{
			return this._AssignmentComment;
		}
		set
		{
			if ((this._AssignmentComment != value))
			{
				this.OnAssignmentCommentChanging(value);
				this.SendPropertyChanging();
				this._AssignmentComment = value;
				this.SendPropertyChanged("AssignmentComment");
				this.OnAssignmentCommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionID", DbType="Int")]
	public System.Nullable<int> SectionID
	{
		get
		{
			return this._SectionID;
		}
		set
		{
			if ((this._SectionID != value))
			{
				if (this._Section.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSectionIDChanging(value);
				this.SendPropertyChanging();
				this._SectionID = value;
				this.SendPropertyChanged("SectionID");
				this.OnSectionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ITAssetProductInfo_ITAssetAssignHistory", Storage="_ITAssetAssignHistories", ThisKey="id", OtherKey="ITAssetProductInfoID")]
	public EntitySet<ITAssetAssignHistory> ITAssetAssignHistories
	{
		get
		{
			return this._ITAssetAssignHistories;
		}
		set
		{
			this._ITAssetAssignHistories.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_ITAssetProductInfo", Storage="_Section", ThisKey="SectionID", OtherKey="id", IsForeignKey=true)]
	public Section Section
	{
		get
		{
			return this._Section.Entity;
		}
		set
		{
			Section previousValue = this._Section.Entity;
			if (((previousValue != value) 
						|| (this._Section.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Section.Entity = null;
					previousValue.ITAssetProductInfos.Remove(this);
				}
				this._Section.Entity = value;
				if ((value != null))
				{
					value.ITAssetProductInfos.Add(this);
					this._SectionID = value.id;
				}
				else
				{
					this._SectionID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Section");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ITAssetSubType_ITAssetProductInfo", Storage="_ITAssetSubType", ThisKey="ITAssetSubTypeID", OtherKey="id", IsForeignKey=true)]
	public ITAssetSubType ITAssetSubType
	{
		get
		{
			return this._ITAssetSubType.Entity;
		}
		set
		{
			ITAssetSubType previousValue = this._ITAssetSubType.Entity;
			if (((previousValue != value) 
						|| (this._ITAssetSubType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ITAssetSubType.Entity = null;
					previousValue.ITAssetProductInfos.Remove(this);
				}
				this._ITAssetSubType.Entity = value;
				if ((value != null))
				{
					value.ITAssetProductInfos.Add(this);
					this._ITAssetSubTypeID = value.id;
				}
				else
				{
					this._ITAssetSubTypeID = default(int);
				}
				this.SendPropertyChanged("ITAssetSubType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ITAssetProductInfo", Storage="_Location", ThisKey="currentLocationID", OtherKey="LID", IsForeignKey=true)]
	public Location Location
	{
		get
		{
			return this._Location.Entity;
		}
		set
		{
			Location previousValue = this._Location.Entity;
			if (((previousValue != value) 
						|| (this._Location.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Location.Entity = null;
					previousValue.ITAssetProductInfos.Remove(this);
				}
				this._Location.Entity = value;
				if ((value != null))
				{
					value.ITAssetProductInfos.Add(this);
					this._currentLocationID = value.LID;
				}
				else
				{
					this._currentLocationID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Location");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ITAssetAssignHistories(ITAssetAssignHistory entity)
	{
		this.SendPropertyChanging();
		entity.ITAssetProductInfo = this;
	}
	
	private void detach_ITAssetAssignHistories(ITAssetAssignHistory entity)
	{
		this.SendPropertyChanging();
		entity.ITAssetProductInfo = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="ITASSET.ITAssetSubType")]
public partial class ITAssetSubType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _SubTypeName;
	
	private string _SubTypeDetails;
	
	private System.Nullable<int> _ITAssetTypeID;
	
	private EntitySet<ITAssetProductInfo> _ITAssetProductInfos;
	
	private EntityRef<ITAssetType> _ITAssetType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnSubTypeNameChanging(string value);
    partial void OnSubTypeNameChanged();
    partial void OnSubTypeDetailsChanging(string value);
    partial void OnSubTypeDetailsChanged();
    partial void OnITAssetTypeIDChanging(System.Nullable<int> value);
    partial void OnITAssetTypeIDChanged();
    #endregion
	
	public ITAssetSubType()
	{
		this._ITAssetProductInfos = new EntitySet<ITAssetProductInfo>(new Action<ITAssetProductInfo>(this.attach_ITAssetProductInfos), new Action<ITAssetProductInfo>(this.detach_ITAssetProductInfos));
		this._ITAssetType = default(EntityRef<ITAssetType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTypeName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
	public string SubTypeName
	{
		get
		{
			return this._SubTypeName;
		}
		set
		{
			if ((this._SubTypeName != value))
			{
				this.OnSubTypeNameChanging(value);
				this.SendPropertyChanging();
				this._SubTypeName = value;
				this.SendPropertyChanged("SubTypeName");
				this.OnSubTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTypeDetails", DbType="NVarChar(255)")]
	public string SubTypeDetails
	{
		get
		{
			return this._SubTypeDetails;
		}
		set
		{
			if ((this._SubTypeDetails != value))
			{
				this.OnSubTypeDetailsChanging(value);
				this.SendPropertyChanging();
				this._SubTypeDetails = value;
				this.SendPropertyChanged("SubTypeDetails");
				this.OnSubTypeDetailsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ITAssetTypeID", DbType="Int")]
	public System.Nullable<int> ITAssetTypeID
	{
		get
		{
			return this._ITAssetTypeID;
		}
		set
		{
			if ((this._ITAssetTypeID != value))
			{
				if (this._ITAssetType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnITAssetTypeIDChanging(value);
				this.SendPropertyChanging();
				this._ITAssetTypeID = value;
				this.SendPropertyChanged("ITAssetTypeID");
				this.OnITAssetTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ITAssetSubType_ITAssetProductInfo", Storage="_ITAssetProductInfos", ThisKey="id", OtherKey="ITAssetSubTypeID")]
	public EntitySet<ITAssetProductInfo> ITAssetProductInfos
	{
		get
		{
			return this._ITAssetProductInfos;
		}
		set
		{
			this._ITAssetProductInfos.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ITAssetType_ITAssetSubType", Storage="_ITAssetType", ThisKey="ITAssetTypeID", OtherKey="id", IsForeignKey=true)]
	public ITAssetType ITAssetType
	{
		get
		{
			return this._ITAssetType.Entity;
		}
		set
		{
			ITAssetType previousValue = this._ITAssetType.Entity;
			if (((previousValue != value) 
						|| (this._ITAssetType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ITAssetType.Entity = null;
					previousValue.ITAssetSubTypes.Remove(this);
				}
				this._ITAssetType.Entity = value;
				if ((value != null))
				{
					value.ITAssetSubTypes.Add(this);
					this._ITAssetTypeID = value.id;
				}
				else
				{
					this._ITAssetTypeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ITAssetType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ITAssetProductInfos(ITAssetProductInfo entity)
	{
		this.SendPropertyChanging();
		entity.ITAssetSubType = this;
	}
	
	private void detach_ITAssetProductInfos(ITAssetProductInfo entity)
	{
		this.SendPropertyChanging();
		entity.ITAssetSubType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="ITASSET.ITAssetType")]
public partial class ITAssetType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _TypeName;
	
	private string _TypeDetails;
	
	private System.Nullable<decimal> _isAsset;
	
	private EntitySet<ITAssetSubType> _ITAssetSubTypes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnTypeDetailsChanging(string value);
    partial void OnTypeDetailsChanged();
    partial void OnisAssetChanging(System.Nullable<decimal> value);
    partial void OnisAssetChanged();
    #endregion
	
	public ITAssetType()
	{
		this._ITAssetSubTypes = new EntitySet<ITAssetSubType>(new Action<ITAssetSubType>(this.attach_ITAssetSubTypes), new Action<ITAssetSubType>(this.detach_ITAssetSubTypes));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
	public string TypeName
	{
		get
		{
			return this._TypeName;
		}
		set
		{
			if ((this._TypeName != value))
			{
				this.OnTypeNameChanging(value);
				this.SendPropertyChanging();
				this._TypeName = value;
				this.SendPropertyChanged("TypeName");
				this.OnTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeDetails", DbType="NVarChar(255)")]
	public string TypeDetails
	{
		get
		{
			return this._TypeDetails;
		}
		set
		{
			if ((this._TypeDetails != value))
			{
				this.OnTypeDetailsChanging(value);
				this.SendPropertyChanging();
				this._TypeDetails = value;
				this.SendPropertyChanged("TypeDetails");
				this.OnTypeDetailsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAsset", DbType="Decimal(1,0)")]
	public System.Nullable<decimal> isAsset
	{
		get
		{
			return this._isAsset;
		}
		set
		{
			if ((this._isAsset != value))
			{
				this.OnisAssetChanging(value);
				this.SendPropertyChanging();
				this._isAsset = value;
				this.SendPropertyChanged("isAsset");
				this.OnisAssetChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ITAssetType_ITAssetSubType", Storage="_ITAssetSubTypes", ThisKey="id", OtherKey="ITAssetTypeID")]
	public EntitySet<ITAssetSubType> ITAssetSubTypes
	{
		get
		{
			return this._ITAssetSubTypes;
		}
		set
		{
			this._ITAssetSubTypes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ITAssetSubTypes(ITAssetSubType entity)
	{
		this.SendPropertyChanging();
		entity.ITAssetType = this;
	}
	
	private void detach_ITAssetSubTypes(ITAssetSubType entity)
	{
		this.SendPropertyChanging();
		entity.ITAssetType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="ITASSET.Location")]
public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _LID;
	
	private string _Location1;
	
	private string _Details;
	
	private EntitySet<ITAssetAssignHistory> _ITAssetAssignHistories;
	
	private EntitySet<ITAssetProductInfo> _ITAssetProductInfos;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLIDChanging(int value);
    partial void OnLIDChanged();
    partial void OnLocation1Changing(string value);
    partial void OnLocation1Changed();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    #endregion
	
	public Location()
	{
		this._ITAssetAssignHistories = new EntitySet<ITAssetAssignHistory>(new Action<ITAssetAssignHistory>(this.attach_ITAssetAssignHistories), new Action<ITAssetAssignHistory>(this.detach_ITAssetAssignHistories));
		this._ITAssetProductInfos = new EntitySet<ITAssetProductInfo>(new Action<ITAssetProductInfo>(this.attach_ITAssetProductInfos), new Action<ITAssetProductInfo>(this.detach_ITAssetProductInfos));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int LID
	{
		get
		{
			return this._LID;
		}
		set
		{
			if ((this._LID != value))
			{
				this.OnLIDChanging(value);
				this.SendPropertyChanging();
				this._LID = value;
				this.SendPropertyChanged("LID");
				this.OnLIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Location", Storage="_Location1", DbType="NVarChar(200)")]
	public string Location1
	{
		get
		{
			return this._Location1;
		}
		set
		{
			if ((this._Location1 != value))
			{
				this.OnLocation1Changing(value);
				this.SendPropertyChanging();
				this._Location1 = value;
				this.SendPropertyChanged("Location1");
				this.OnLocation1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(255)")]
	public string Details
	{
		get
		{
			return this._Details;
		}
		set
		{
			if ((this._Details != value))
			{
				this.OnDetailsChanging(value);
				this.SendPropertyChanging();
				this._Details = value;
				this.SendPropertyChanged("Details");
				this.OnDetailsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ITAssetAssignHistory", Storage="_ITAssetAssignHistories", ThisKey="LID", OtherKey="CurrentLocationID")]
	public EntitySet<ITAssetAssignHistory> ITAssetAssignHistories
	{
		get
		{
			return this._ITAssetAssignHistories;
		}
		set
		{
			this._ITAssetAssignHistories.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ITAssetProductInfo", Storage="_ITAssetProductInfos", ThisKey="LID", OtherKey="currentLocationID")]
	public EntitySet<ITAssetProductInfo> ITAssetProductInfos
	{
		get
		{
			return this._ITAssetProductInfos;
		}
		set
		{
			this._ITAssetProductInfos.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ITAssetAssignHistories(ITAssetAssignHistory entity)
	{
		this.SendPropertyChanging();
		entity.Location = this;
	}
	
	private void detach_ITAssetAssignHistories(ITAssetAssignHistory entity)
	{
		this.SendPropertyChanging();
		entity.Location = null;
	}
	
	private void attach_ITAssetProductInfos(ITAssetProductInfo entity)
	{
		this.SendPropertyChanging();
		entity.Location = this;
	}
	
	private void detach_ITAssetProductInfos(ITAssetProductInfo entity)
	{
		this.SendPropertyChanging();
		entity.Location = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vw_ITAssetAllProducts")]
public partial class vw_ITAssetAllProduct
{
	
	private int _id;
	
	private string _AssetCode;
	
	private System.Nullable<int> _ITAssetTypeID;
	
	private string _TypeName;
	
	private int _ITAssetSubTypeID;
	
	private string _SubTypeName;
	
	private System.Nullable<int> _DivisionID;
	
	private string _DivCode;
	
	private string _Division;
	
	private System.Nullable<int> _SectionID;
	
	private string _SecCode;
	
	private string _Section;
	
	private System.Nullable<int> _currentLocationID;
	
	private string _Location;
	
	private string _Details;
	
	private string _ITAssetDetails;
	
	private string _UniquePartNum;
	
	private string _ProductNumber;
	
	private string _CostCode;
	
	private System.Nullable<System.DateTime> _WarrantyStart;
	
	private System.Nullable<System.DateTime> _WarrantyEnd;
	
	private string _StatusName;
	
	private System.Nullable<int> _currentUserID;
	
	private System.Nullable<decimal> _isAsset;
	
	private System.Nullable<decimal> _enumStatus;
	
	private string _UserName;
	
	public vw_ITAssetAllProduct()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this._id = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string AssetCode
	{
		get
		{
			return this._AssetCode;
		}
		set
		{
			if ((this._AssetCode != value))
			{
				this._AssetCode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ITAssetTypeID", DbType="Int")]
	public System.Nullable<int> ITAssetTypeID
	{
		get
		{
			return this._ITAssetTypeID;
		}
		set
		{
			if ((this._ITAssetTypeID != value))
			{
				this._ITAssetTypeID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(200)")]
	public string TypeName
	{
		get
		{
			return this._TypeName;
		}
		set
		{
			if ((this._TypeName != value))
			{
				this._TypeName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ITAssetSubTypeID", DbType="Int NOT NULL")]
	public int ITAssetSubTypeID
	{
		get
		{
			return this._ITAssetSubTypeID;
		}
		set
		{
			if ((this._ITAssetSubTypeID != value))
			{
				this._ITAssetSubTypeID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTypeName", DbType="NVarChar(200)")]
	public string SubTypeName
	{
		get
		{
			return this._SubTypeName;
		}
		set
		{
			if ((this._SubTypeName != value))
			{
				this._SubTypeName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionID", DbType="Int")]
	public System.Nullable<int> DivisionID
	{
		get
		{
			return this._DivisionID;
		}
		set
		{
			if ((this._DivisionID != value))
			{
				this._DivisionID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivCode", DbType="NVarChar(50)")]
	public string DivCode
	{
		get
		{
			return this._DivCode;
		}
		set
		{
			if ((this._DivCode != value))
			{
				this._DivCode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Division", DbType="NVarChar(100)")]
	public string Division
	{
		get
		{
			return this._Division;
		}
		set
		{
			if ((this._Division != value))
			{
				this._Division = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionID", DbType="Int")]
	public System.Nullable<int> SectionID
	{
		get
		{
			return this._SectionID;
		}
		set
		{
			if ((this._SectionID != value))
			{
				this._SectionID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecCode", DbType="NVarChar(50)")]
	public string SecCode
	{
		get
		{
			return this._SecCode;
		}
		set
		{
			if ((this._SecCode != value))
			{
				this._SecCode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="NVarChar(100)")]
	public string Section
	{
		get
		{
			return this._Section;
		}
		set
		{
			if ((this._Section != value))
			{
				this._Section = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentLocationID", DbType="Int")]
	public System.Nullable<int> currentLocationID
	{
		get
		{
			return this._currentLocationID;
		}
		set
		{
			if ((this._currentLocationID != value))
			{
				this._currentLocationID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(200)")]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this._Location = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(255)")]
	public string Details
	{
		get
		{
			return this._Details;
		}
		set
		{
			if ((this._Details != value))
			{
				this._Details = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ITAssetDetails", DbType="NVarChar(255)")]
	public string ITAssetDetails
	{
		get
		{
			return this._ITAssetDetails;
		}
		set
		{
			if ((this._ITAssetDetails != value))
			{
				this._ITAssetDetails = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniquePartNum", DbType="NVarChar(255)")]
	public string UniquePartNum
	{
		get
		{
			return this._UniquePartNum;
		}
		set
		{
			if ((this._UniquePartNum != value))
			{
				this._UniquePartNum = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductNumber", DbType="NVarChar(255)")]
	public string ProductNumber
	{
		get
		{
			return this._ProductNumber;
		}
		set
		{
			if ((this._ProductNumber != value))
			{
				this._ProductNumber = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCode", DbType="NVarChar(20)")]
	public string CostCode
	{
		get
		{
			return this._CostCode;
		}
		set
		{
			if ((this._CostCode != value))
			{
				this._CostCode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarrantyStart", DbType="DateTime")]
	public System.Nullable<System.DateTime> WarrantyStart
	{
		get
		{
			return this._WarrantyStart;
		}
		set
		{
			if ((this._WarrantyStart != value))
			{
				this._WarrantyStart = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarrantyEnd", DbType="DateTime")]
	public System.Nullable<System.DateTime> WarrantyEnd
	{
		get
		{
			return this._WarrantyEnd;
		}
		set
		{
			if ((this._WarrantyEnd != value))
			{
				this._WarrantyEnd = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="VarChar(17)")]
	public string StatusName
	{
		get
		{
			return this._StatusName;
		}
		set
		{
			if ((this._StatusName != value))
			{
				this._StatusName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentUserID", DbType="int")]
	public System.Nullable<int> currentUserID
	{
		get
		{
			return this._currentUserID;
		}
		set
		{
			if ((this._currentUserID != value))
			{
				this._currentUserID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAsset", DbType="Decimal(1,0)")]
	public System.Nullable<decimal> isAsset
	{
		get
		{
			return this._isAsset;
		}
		set
		{
			if ((this._isAsset != value))
			{
				this._isAsset = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enumStatus", DbType="Decimal(1,0)")]
	public System.Nullable<decimal> enumStatus
	{
		get
		{
			return this._enumStatus;
		}
		set
		{
			if ((this._enumStatus != value))
			{
				this._enumStatus = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this._UserName = value;
			}
		}
	}
}
#pragma warning restore 1591
